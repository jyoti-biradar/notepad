package notepadapplication;

import java.awt.Color;
import java.awt.FileDialog;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.StringSelection;
import java.awt.datatransfer.Transferable;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Document;
import javax.swing.text.Highlighter;
import javax.swing.text.JTextComponent;

public class notepad extends javax.swing.JFrame {

    /**
     * Creates new form NewJFrame
     */
    public notepad() {
        initComponents();
    }
   String filename;
    Clipboard clipboard=getToolkit().getSystemClipboard();
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        searchbtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        newmenu = new javax.swing.JMenuItem();
        openmenu = new javax.swing.JMenuItem();
        savemenu = new javax.swing.JMenuItem();
        exitmenu = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        cutmenu = new javax.swing.JMenuItem();
        copymenu = new javax.swing.JMenuItem();
        pastemenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        searchbtn.setText("Search");
        searchbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchbtnActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jMenu1.setText("File");

        newmenu.setText("New");
        newmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newmenuActionPerformed(evt);
            }
        });
        jMenu1.add(newmenu);

        openmenu.setText("Open");
        openmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openmenuActionPerformed(evt);
            }
        });
        jMenu1.add(openmenu);

        savemenu.setText("Save ");
        savemenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savemenuActionPerformed(evt);
            }
        });
        jMenu1.add(savemenu);

        exitmenu.setText("Exit");
        exitmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitmenuActionPerformed(evt);
            }
        });
        jMenu1.add(exitmenu);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");

        cutmenu.setText("Cut");
        cutmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutmenuActionPerformed(evt);
            }
        });
        jMenu2.add(cutmenu);

        copymenu.setText("Copy");
        copymenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copymenuActionPerformed(evt);
            }
        });
        jMenu2.add(copymenu);

        pastemenu.setText("Paste");
        pastemenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pastemenuActionPerformed(evt);
            }
        });
        jMenu2.add(pastemenu);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 517, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchbtn, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE))
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1)
                    .addComponent(searchbtn, javax.swing.GroupLayout.DEFAULT_SIZE, 55, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchbtnActionPerformed
         try{serchtext(jTextArea1,jTextField1.getText() );
         }catch(Exception e){
             JOptionPane.showMessageDialog(null,"pleasse enter inthe text in the textfield");
         }
    }//GEN-LAST:event_searchbtnActionPerformed
class myhighlighter extends DefaultHighlighter.DefaultHighlightPainter{
    public myhighlighter(Color color){
        super(Color.red);
    }
}
DefaultHighlighter.DefaultHighlightPainter highlight=new myhighlighter(Color.yellow);
public void removehighlighter(JTextComponent txtcombo){
    Highlighter removehighter=txtcombo.getHighlighter();
    Highlighter.Highlight[] remove=removehighter.getHighlights();
    for(int i=0;i<remove.length;i++){
        if(remove[i].getPainter() instanceof myhighlighter){
            removehighter.removeHighlight(remove[i]);
        }
    }
}
public void serchtext(JTextComponent textcom,String txtstring){
    removehighlighter(textcom);
try{
    Highlighter hlight=textcom.getHighlighter();
    Document document=textcom.getDocument();
    String txt=document.getText(0, document.getLength());
    int poss=0;
    while((poss=txt.toUpperCase().indexOf(txtstring.toUpperCase(),poss))>=0)
    {
        hlight.addHighlight(poss, poss+txtstring.length(), highlight);
        poss+=txtstring.length();
    }
}catch(Exception e){
}
}
    private void openmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openmenuActionPerformed
       FileDialog fd = new FileDialog(notepad.this, "Open a file", FileDialog.LOAD);
       fd.setVisible(true);
       if(fd.getFile()!=null){
           filename=fd.getDirectory()+fd.getFile();
           setTitle(filename);
       }
        try {
            BufferedReader br=new BufferedReader(new FileReader(filename));
            StringBuilder sb=new StringBuilder();
            String line=null;
            while((line=br.readLine())!=null){
                sb.append(line+ "\n");
                jTextArea1.setText(sb.toString());
            }
            br.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,"file not found");
        }
    }//GEN-LAST:event_openmenuActionPerformed

    private void newmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newmenuActionPerformed
        jTextArea1.setText("");
        setTitle(filename);
    }//GEN-LAST:event_newmenuActionPerformed

    private void savemenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savemenuActionPerformed
         FileDialog fd = new FileDialog(notepad.this, "Save a file", FileDialog.SAVE);
         fd.setVisible(true);
         if(fd.getFile()!=null){
             filename=fd.getDirectory()+fd.getFile();
             setTitle(filename);
         }
         try {
            FileWriter fw=new FileWriter(filename);
            fw.write(jTextArea1.getText());
             setTitle(filename);
             fw.close();
             JOptionPane.showMessageDialog(null,"file saved");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,"file not saved");
        }
    }//GEN-LAST:event_savemenuActionPerformed

    private void exitmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitmenuActionPerformed
       System.exit(0);
    }//GEN-LAST:event_exitmenuActionPerformed

    private void cutmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutmenuActionPerformed
        String cutString=jTextArea1.getSelectedText();
        StringSelection cutselection=new StringSelection(cutString);
        clipboard.setContents(cutselection, cutselection);
        jTextArea1.replaceRange("",jTextArea1.getSelectionStart(),jTextArea1.getSelectionEnd());
    }//GEN-LAST:event_cutmenuActionPerformed

    private void copymenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copymenuActionPerformed
      String copytext=jTextArea1.getSelectedText();
      StringSelection copyselection=new StringSelection(copytext);
      clipboard.setContents(copyselection, copyselection);
    }//GEN-LAST:event_copymenuActionPerformed

    private void pastemenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pastemenuActionPerformed
        try {
            Transferable pastetext=clipboard.getContents(notepad.this);
            String sel=(String)pastetext.getTransferData(DataFlavor.stringFlavor);
            jTextArea1.replaceRange(sel,jTextArea1.getSelectionStart(),jTextArea1.getSelectionEnd());
            
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,"you can't select text");
        }
    }//GEN-LAST:event_pastemenuActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(notepad.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new notepad().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem copymenu;
    private javax.swing.JMenuItem cutmenu;
    private javax.swing.JMenuItem exitmenu;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JMenuItem newmenu;
    private javax.swing.JMenuItem openmenu;
    private javax.swing.JMenuItem pastemenu;
    private javax.swing.JMenuItem savemenu;
    private javax.swing.JButton searchbtn;
    // End of variables declaration//GEN-END:variables
}
